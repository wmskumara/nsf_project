#!/usr/bin/python

from ABE_ADCDifferentialPi import ADCDifferentialPi
from ABE_helpers import ABEHelpers
import time
import os

i2c_helper = ABEHelpers()
bus = i2c_helper.get_smbus()
adc = ADCDifferentialPi(bus, 0x68, 0x69, 16)

temp1 = (float(adc.read_voltage(1))) #reading temprature from channel 1
temp3 = (float(adc.read_voltage(3))) #reading temprature from channel 3
temp5 = (float(adc.read_voltage(5))) #reading temprature from channel 5

logFile = open('logFile.txt','a')
headder = '\nCalibration Started on' + ' ' + str(time.strftime('%Y-%m-%d @ %H:%M:%S')) + '\n' + 'Time\ts1_temp\ts1_RH\ts2_temp\ts2_RH\ts3_temp\ts3_RH\ts1_pr\ts2_pr' + '\n'
logFile.write(headder)

slope1 = 0.0301
slope2 = 0.0295

#calculation for sensor one(humidity)
def s1_rhout(inval): 
  rh = (inval - 0.74)/slope1
  return rh
def s1_trueval(inval2):
  vout = (inval2 * (99.6 + 94.1))/94.1
  return vout
def s1_truerh(inval2):
  trrh = inval2 / (1.0546-(temp1*0.00216))
  return trrh
   
   
#calculation for sensor two(humidity)
def s2_rhout(inval): 
  rh = (inval - 0.74)/slope1
  return rh
def s2_truerh(inval1):
  trrh = inval1 / (1.0546-(temp3*0.00216))
  return trrh
def s2_trueval(inval1):
  vout = (inval1 * (99.4 + 95.2))/95.2
  return vout

#calculation for sensor three(humidity)
def s3_rhout(inval): 
  rh = (inval - 0.74)/slope1
  return rh
def s3_truerh(inval1):
  trrh = inval1 / (1.0546-(temp5*0.00216))
  return trrh
def s3_trueval(inval1):
  vout = (inval1 * (99.4 + 95.2))/95.2
  return vout

  
#calculation for pressure sensors
def cal_pressure(inval):
  reading = (float(inval/0.020))*2068.43
  return reading
  
#calculation for temprature sensors
def cal_temp(inval):
  reading = inval * 96
  return reading
  
  
print("Calibration Started @ %s" % time.strftime('%Y-%m-%d @ %H:%M:%S'))
while (True):
  print("Current Time %s" % time.strftime('%H:%M:%S'))
  print ("Current Temprature channel 1: %0.2f" % cal_temp(adc.read_voltage(1)))                            #print temprature
  print ("Current Humidity channel 2: %0.2f" % s2_truerh(s2_rhout(s2_trueval(adc.read_voltage(2)))))    	 #print humidity
  
  print ("Current Temprature channel 3: %0.2f" % cal_temp(adc.read_voltage(3)))                            #print temprature
  print ("Current Humidity channel 4: %0.2f" % s1_truerh(s1_rhout(s1_trueval(adc.read_voltage(4)))))    	 #print humidity
  
  print ("Current Temprature channel 5: %0.2f" % cal_temp(adc.read_voltage(5)))                            #print temprature
  print ("Current Humidity channel 6: %0.2f" % s1_truerh(s1_rhout(s1_trueval(adc.read_voltage(6)))))    	 #print humidity
  
  print("Current Pressure channel 7: %0.2f" % cal_pressure(adc.read_voltage(7)))
  print("Current Pressure channel 8: %0.2f" % cal_pressure(adc.read_voltage(8)))
  
  logText = str(time.strftime('%H:%M:%S')) + ' ' + str(round(cal_temp(adc.read_voltage(1)),2)) + '\t' + str(round(s2_truerh(s2_rhout(s2_trueval(adc.read_voltage(2)))),2)) + '\t' + str(round(cal_temp(adc.read_voltage(3)),2)) + '\t' + str(round(s1_truerh(s1_rhout(s1_trueval(adc.read_voltage(4)))),2)) + '\t' + str(round(cal_temp(adc.read_voltage(5)),2)) + '\t' + str(round(s1_truerh(s1_rhout(s1_trueval(adc.read_voltage(6)))),2)) + '\t' + str(round(cal_pressure(adc.read_voltage(7)),2)) + '\t' + str(round(cal_pressure(adc.read_voltage(8)),2)) + '\n' 
  
  logFile.write(logText)
  print ("-----------------------------------")

time.sleep(1)
